version: '3.8'

services:
  # === Kafka ===
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_KRAFT_CLUSTER_ID: "Adksdfonds_sAdsf"
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_JMX_PORT: "9102"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "PLAINTEXT"
    depends_on:
      kafka:
        condition: service_healthy

  # === PostgreSQL для safedeck-root ===
  postgres-root:
    image: postgres:15
    container_name: postgres-root
    environment:
      POSTGRES_USER: root_user
      POSTGRES_PASSWORD: root_pass
      POSTGRES_DB: root_db
    ports:
      - "5434:5432"  # Чтобы не конфликтовать с другим Postgres
    volumes:
      - postgres_root_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root_user -d root_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  # === PostgreSQL для safedeck-encrypt-service ===
  postgres-encrypt:
    image: postgres:15
    container_name: postgres-encrypt
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: encrypt
    ports:
      - "5433:5432"
    volumes:
      - postgres_encrypt_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U encrypt_user -d encrypt_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  # === Микросервисы ===

  safedeck-root:
    build:
      context: .
      dockerfile: root/Dockerfile
    container_name: safedeck-root
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-root:5432/root_db
      SPRING_DATASOURCE_USERNAME: root_user
      SPRING_DATASOURCE_PASSWORD: root_pass
    depends_on:
      postgres-root:
        condition: service_healthy
      kafka:
        condition: service_healthy

  safedeck-email-service:
    build:
      context: .
      dockerfile: safedeck-email-service/Dockerfile
    container_name: safedeck-email-service
    ports:
      - "8087:8087"
    environment:
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  safedeck-encrypt-service:
    build:
      context: .
      dockerfile: safedeck-encrypt-service/Dockerfile
    container_name: safedeck-encrypt-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-encrypt:5432/encrypt_db
      SPRING_DATASOURCE_USERNAME: encrypt_user
      SPRING_DATASOURCE_PASSWORD: encrypt_pass
    depends_on:
      postgres-encrypt:
        condition: service_healthy
      kafka:
        condition: service_healthy

  safedeck-llm-service:
    build:
      context: .
      dockerfile: safedeck-llm/Dockerfile
    container_name: safedeck-llm-service
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  postgres_encrypt_data:
  postgres_root_data: