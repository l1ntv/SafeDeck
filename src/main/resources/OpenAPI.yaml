openapi: 3.0.3
info:
  title: SafeDeck main module API
  description: API документация для основного модуля сервиса SafeDeck
  version: 1.0.0
tags:
  - name: Регистрация и аутентификация
  - name: Работа с досками
  - name: Работа с карточками
servers:
  - url: http://localhost:8080
    description: Локальный сервер

paths:
  /auth/register:
    post:
      tags:
        - Регистрация и аутентификация
      summary: Регистрация нового пользователя
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationClientRequestDTO'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponseDTO'
        '400':
          description: Ошибка валидации или некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '409':
          description: Конфликт — пользователь с таким email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /auth/login:
    post:
      tags:
        - Регистрация и аутентификация
      summary: Аутентификация пользователя
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDTO'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseDTO'
        '400':
          description: Ошибка валидации или некорректные входные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /boards:
    get:
      tags:
        - Работа с досками
      summary: Получить список всех досок текущего пользователя
      operationId: getUserBoards
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список досок пользователя успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

    post:
      tags:
        - Работа с досками
      summary: Создать новую доску для текущего пользователя
      operationId: createBoard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedUserBoardDTO'
      responses:
        '201':
          description: Доска успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardDTO'
        '400':
          description: Ошибка валидации данных доски
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /boards/{boardId}/rename:
    patch:
      tags:
        - Работа с досками
      summary: Переименовать существующую доску
      operationId: renameBoard
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenamedBoardDTO'
      responses:
        '200':
          description: Доска успешно переименована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardDTO'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: |
            Доска не найдена  
            ИЛИ  
            Пользователь не является владельцем доски
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  /boards/{boardId}/delete:
    delete:
      tags:
        - Работа с досками
      summary: Удалить доску
      operationId: deleteBoard
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Доска успешно удалена
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: |
            Доска не найдена  
            ИЛИ  
            Пользователь не является владельцем доски
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

  # Пример эндпоинтов для работы с карточками (можно расширять)
  /boards/{boardId}/cards:
    post:
      tags:
        - Работа с карточками
      summary: Создать новую карточку на доске
      operationId: createCard
      security:
        - bearerAuth: []
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateDTO'
      responses:
        '201':
          description: Карточка успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '404':
          description: |
            Доска не найдена  
            ИЛИ  
            Пользователь не является владельцем доски
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'

components:
  schemas:
    RegistrationClientRequestDTO:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: securepassword123
        publicName:
          type: string
          example: JohnDoe
        IP:
          type: string
          example: 192.168.1.1
        country:
          type: string
          example: Russia
        provider:
          type: string
          example: Yandex
        device:
          type: string
          example: iPhone 13

    RegistrationResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT-токен, выданный после успешной регистрации
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.xxxxx

    AuthenticationRequestDTO:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: securepassword123
        IP:
          type: string
          example: 192.168.1.1
        country:
          type: string
          example: Russia
        provider:
          type: string
          example: Google
        device:
          type: string
          example: Samsung Galaxy S22

    AuthenticationResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT-токен, выданный после успешной аутентификации
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.xxxxx

    ErrorResponseDTO:
      type: object
      properties:
        error:
          type: string
          example: "User with this email already exists."
        timestamp:
          type: string
          format: date-time
          example: "2025-04-05T12:34:56Z"

    BoardDTO:
      type: object
      properties:
        boardId:
          type: integer
          format: int64
          example: 1
        boardName:
          type: string
          example: "Мои задачи"

    CreatedUserBoardDTO:
      type: object
      required:
        - boardName
      properties:
        boardName:
          type: string
          example: "Новая доска"

    RenamedBoardDTO:
      type: object
      properties:
        newBoardName:
          type: string
          example: "Обновлённое имя доски"

    CardCreateDTO:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          example: "Изучить OpenAPI"
        description:
          type: string
          example: "Понять, как структурировать API"
        dueDate:
          type: string
          format: date-time
          example: "2025-04-10T12:00:00Z"

    CardDTO:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
          example: 101
        title:
          type: string
          example: "Изучить OpenAPI"
        description:
          type: string
          example: "Понять, как структурировать API"
        dueDate:
          type: string
          format: date-time
          example: "2025-04-10T12:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-05T10:00:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT